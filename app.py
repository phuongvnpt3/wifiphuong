from flask import Flask, request, jsonify, send_from_directory
import pandas as pd
import requests
import os

app = Flask(__name__)

# ================= C·∫§U H√åNH ZALO OA =================
OA_ACCESS_TOKEN = "7XXGTcL3LEjPNCiWNPOP"
OA_SECRET_KEY = "RXK8PdDhGkfCiFbVQXgA"
ZALO_API_URL = "https://openapi.zalo.me/v3.0/oa/message"
# =====================================================

try:
    # ƒê·ªçc file Excel v·ªõi t·ª´ kh√≥a
    keyword_data = pd.read_excel("tu_khoa.xlsx", sheet_name=0)
    
    # Chu·∫©n h√≥a keyword: ch·ªØ th∆∞·ªùng v√† b·ªè kho·∫£ng tr·∫Øng th·ª´a
    keyword_data['keyword'] = keyword_data['keyword'].str.strip().str.lower()
    
    print("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ª´ kh√≥a th√†nh c√¥ng")
    print(keyword_data)
except Exception as e:
    print(f"‚ùå L·ªói khi ƒë·ªçc file Excel: {str(e)}")
    keyword_data = pd.DataFrame(columns=['keyword', 'response'])

def reply_to_user(user_id, message):
    """G·ª≠i tin nh·∫Øn ph·∫£n h·ªìi ƒë·∫øn ng∆∞·ªùi d√πng qua Zalo API"""
    headers = {
        "Content-Type": "application/json",
        "access_token": OA_ACCESS_TOKEN
    }
    payload = {
        "recipient": {
            "user_id": user_id
        },
        "message": {
            "text": message
        }
    }
    
    try:
        response = requests.post(ZALO_API_URL, headers=headers, json=payload)
        response.raise_for_status()  # Ki·ªÉm tra l·ªói HTTP
        print(f"‚úÖ ƒê√£ g·ª≠i ph·∫£n h·ªìi cho {user_id}: {message}")
        return True
    except requests.exceptions.RequestException as e:
        print(f"‚ùå L·ªói khi g·ª≠i tin nh·∫Øn: {str(e)}")
        print(f"URL: {ZALO_API_URL}")
        print(f"Headers: {headers}")
        print(f"Payload: {payload}")
        return False

# Route x√°c th·ª±c webhook b·∫±ng file HTML
@app.route("/zalo_verifierSlgK3gJy7Gf4pCmNcE5vEagNeoMcuNHwCJ0q.html")
def zalo_verifier():
    return send_from_directory('.', 'zalo_verifierSlgK3gJy7Gf4pCmNcE5vEagNeoMcuNHwCJ0q.html')

# Webhook ch√≠nh
@app.route("/", methods=["GET", "POST", "OPTIONS"])
def webhook():
    # X·ª≠ l√Ω y√™u c·∫ßu x√°c th·ª±c webhook (GET)
    if request.method == "GET":
        oa_id = request.args.get("oaid")
        secret_key = request.args.get("secret_key")
        
        if oa_id and secret_key:
            # Ki·ªÉm tra th√¥ng tin x√°c th·ª±c
            if secret_key == OA_SECRET_KEY:
                print("‚úÖ X√°c th·ª±c webhook th√†nh c√¥ng (Secret Key ƒë√∫ng)")
                return jsonify({"status": "success"}), 200
            else:
                print("‚ùå X√°c th·ª±c webhook th·∫•t b·∫°i: Secret Key kh√¥ng kh·ªõp")
                return jsonify({"status": "unauthorized"}), 403
        return "Zalo OA Webhook", 200

    # X·ª≠ l√Ω y√™u c·∫ßu OPTIONS (CORS)
    elif request.method == "OPTIONS":
        return jsonify({"status": "success"}), 200

    # X·ª≠ l√Ω s·ª± ki·ªán t·ª´ Zalo (POST)
    elif request.method == "POST":
        try:
            data = request.get_json()
            print("üì® D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", data)

            # Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu
            if not data or "event_name" not in data:
                print("‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá t·ª´ Zalo")
                return jsonify({"status": "invalid_data"}), 400

            # Ch·ªâ x·ª≠ l√Ω s·ª± ki·ªán ng∆∞·ªùi d√πng g·ª≠i tin nh·∫Øn vƒÉn b·∫£n
            if data.get("event_name") == "user_send_text":
                user_id = data["sender"]["id"]
                user_message = data["message"]["text"].strip().lower()
                print(f"üë§ {user_id}: {user_message}")

                # T√¨m ph·∫£n h·ªìi ph√π h·ª£p trong d·ªØ li·ªáu
                matched = keyword_data[keyword_data['keyword'] == user_message]
                
                if not matched.empty:
                    response_text = matched.iloc[0]['response']
                else:
                    # T·∫°o danh s√°ch t·ª´ kh√≥a g·ª£i √Ω
                    suggestions = ", ".join(keyword_data['keyword'].tolist())
                    response_text = (
                        "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n.\n\n"
                        "Vui l√≤ng th·ª≠ m·ªôt trong c√°c t·ª´ kh√≥a sau:\n"
                        f"{suggestions}"
                    )

                # G·ª≠i ph·∫£n h·ªìi
                reply_to_user(user_id, response_text)

            return jsonify({"status": "success"}), 200
        
        except Exception as e:
            print(f"üî• L·ªói nghi√™m tr·ªçng: {str(e)}")
            return jsonify({"status": "error", "message": str(e)}), 500

if __name__ == "__main__":
    # Ki·ªÉm tra c√°c file c·∫ßn thi·∫øt
    required_files = [
        "tu_khoa.xlsx",
        "zalo_verifierSlgK3gJy7Gf4pCmNcE5vEagNeoMcuNHwCJ0q.html"
    ]
    
    missing_files = [f for f in required_files if not os.path.exists(f)]
    
    if missing_files:
        print(f"‚ö†Ô∏è C·∫£nh b√°o: Thi·∫øu c√°c file quan tr·ªçng: {', '.join(missing_files)}")
    else:
        print("‚úÖ T·∫•t c·∫£ file c·∫ßn thi·∫øt ƒë√£ s·∫µn s√†ng")
    
    print("üöÄ Kh·ªüi ch·∫°y chatbot Zalo OA...")
    print(f"üëâ Access Token: {OA_ACCESS_TOKEN}")
    print(f"üëâ Secret Key: {OA_SECRET_KEY}")
    print(f"üëâ Webhook URL: http://0.0.0.0:10000/")
    app.run(host="0.0.0.0", port=10000, debug=True)